package ru.hwsec.teamara;

import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.Security;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.security.spec.ECFieldFp;
import java.security.spec.ECParameterSpec;
import java.security.spec.ECPrivateKeySpec;
import java.security.spec.EllipticCurve;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import javacard.security.

import org.bouncycastle.asn1.sec.ECPrivateKey;
import org.bouncycastle.asn1.sec.SECNamedCurves;
import org.bouncycastle.asn1.x9.X9ECParameters;
import org.bouncycastle.jce.ECNamedCurveTable;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.jce.spec.ECKeySpec;
import org.bouncycastle.jce.spec.ECNamedCurveParameterSpec;

import com.sun.xml.internal.messaging.saaj.util.ByteInputStream;

public class CACertTest {
	
	private static final byte[] ROOT_CERT = 
		new byte[]{(byte)0x30, (byte)0x82, (byte)0x01, (byte)0x96, (byte)0x30, (byte)0x82, (byte)0x01, (byte)0x61, (byte)0x02, (byte)0x09, (byte)0x00, (byte)0xfa, (byte)0xe6, (byte)0x71, (byte)0x77, (byte)0x4e, (byte)0xcf, (byte)0xa4, (byte)0xe1, (byte)0x30, (byte)0x0a, (byte)0x06, (byte)0x08, (byte)0x2a, (byte)0x86, (byte)0x48, (byte)0xce, (byte)0x3d, (byte)0x04, (byte)0x03, (byte)0x02, (byte)0x30, (byte)0x79, (byte)0x31, (byte)0x0b, (byte)0x30, (byte)0x09, (byte)0x06, (byte)0x03, (byte)0x55, (byte)0x04, (byte)0x06, (byte)0x13, (byte)0x02, (byte)0x4e, (byte)0x4c, (byte)0x31, (byte)0x16, (byte)0x30, (byte)0x14, (byte)0x06, (byte)0x03, (byte)0x55, (byte)0x04, (byte)0x08, (byte)0x0c, (byte)0x0d, (byte)0x4e, (byte)0x6f, (byte)0x6f, (byte)0x72, (byte)0x64, (byte)0x2d, (byte)0x42, (byte)0x72, (byte)0x61, (byte)0x62, (byte)0x61, (byte)0x6e, (byte)0x74, (byte)0x31, (byte)0x12, (byte)0x30, (byte)0x10, (byte)0x06, (byte)0x03, (byte)0x55, (byte)0x04, (byte)0x07, (byte)0x0c, (byte)0x09, (byte)0x45, (byte)0x69, (byte)0x6e, (byte)0x64, (byte)0x68, (byte)0x6f, (byte)0x76, (byte)0x65, (byte)0x6e, (byte)0x31, (byte)0x0d, (byte)0x30, (byte)0x0b, (byte)0x06, (byte)0x03, (byte)0x55, (byte)0x04, (byte)0x0a, (byte)0x0c, (byte)0x04, (byte)0x54, (byte)0x55, (byte)0x2f, (byte)0x65, (byte)0x31, (byte)0x0c, (byte)0x30, (byte)0x0a, (byte)0x06, (byte)0x03, (byte)0x55, (byte)0x04, (byte)0x0b, (byte)0x0c, (byte)0x03, (byte)0x49, (byte)0x53, (byte)0x54, (byte)0x31, (byte)0x21, (byte)0x30, (byte)0x1f, (byte)0x06, (byte)0x03, (byte)0x55, (byte)0x04, (byte)0x03, (byte)0x0c, (byte)0x18, (byte)0x54, (byte)0x65, (byte)0x61, (byte)0x6d, (byte)0x41, (byte)0x52, (byte)0x41, (byte)0x20, (byte)0x52, (byte)0x6f, (byte)0x6f, (byte)0x74, (byte)0x20, (byte)0x43, (byte)0x65, (byte)0x72, (byte)0x74, (byte)0x69, (byte)0x66, (byte)0x69, (byte)0x63, (byte)0x61, (byte)0x74, (byte)0x65, (byte)0x30, (byte)0x1e, (byte)0x17, (byte)0x0d, (byte)0x31, (byte)0x34, (byte)0x30, (byte)0x39, (byte)0x31, (byte)0x37, (byte)0x31, (byte)0x33, (byte)0x33, (byte)0x34, (byte)0x32, (byte)0x38, (byte)0x5a, (byte)0x17, (byte)0x0d, (byte)0x32, (byte)0x34, (byte)0x30, (byte)0x39, (byte)0x31, (byte)0x34, (byte)0x31, (byte)0x33, (byte)0x33, (byte)0x34, (byte)0x32, (byte)0x38, (byte)0x5a, (byte)0x30, (byte)0x79, (byte)0x31, (byte)0x0b, (byte)0x30, (byte)0x09, (byte)0x06, (byte)0x03, (byte)0x55, (byte)0x04, (byte)0x06, (byte)0x13, (byte)0x02, (byte)0x4e, (byte)0x4c, (byte)0x31, (byte)0x16, (byte)0x30, (byte)0x14, (byte)0x06, (byte)0x03, (byte)0x55, (byte)0x04, (byte)0x08, (byte)0x0c, (byte)0x0d, (byte)0x4e, (byte)0x6f, (byte)0x6f, (byte)0x72, (byte)0x64, (byte)0x2d, (byte)0x42, (byte)0x72, (byte)0x61, (byte)0x62, (byte)0x61, (byte)0x6e, (byte)0x74, (byte)0x31, (byte)0x12, (byte)0x30, (byte)0x10, (byte)0x06, (byte)0x03, (byte)0x55, (byte)0x04, (byte)0x07, (byte)0x0c, (byte)0x09, (byte)0x45, (byte)0x69, (byte)0x6e, (byte)0x64, (byte)0x68, (byte)0x6f, (byte)0x76, (byte)0x65, (byte)0x6e, (byte)0x31, (byte)0x0d, (byte)0x30, (byte)0x0b, (byte)0x06, (byte)0x03, (byte)0x55, (byte)0x04, (byte)0x0a, (byte)0x0c, (byte)0x04, (byte)0x54, (byte)0x55, (byte)0x2f, (byte)0x65, (byte)0x31, (byte)0x0c, (byte)0x30, (byte)0x0a, (byte)0x06, (byte)0x03, (byte)0x55, (byte)0x04, (byte)0x0b, (byte)0x0c, (byte)0x03, (byte)0x49, (byte)0x53, (byte)0x54, (byte)0x31, (byte)0x21, (byte)0x30, (byte)0x1f, (byte)0x06, (byte)0x03, (byte)0x55, (byte)0x04, (byte)0x03, (byte)0x0c, (byte)0x18, (byte)0x54, (byte)0x65, (byte)0x61, (byte)0x6d, (byte)0x41, (byte)0x52, (byte)0x41, (byte)0x20, (byte)0x52, (byte)0x6f, (byte)0x6f, (byte)0x74, (byte)0x20, (byte)0x43, (byte)0x65, (byte)0x72, (byte)0x74, (byte)0x69, (byte)0x66, (byte)0x69, (byte)0x63, (byte)0x61, (byte)0x74, (byte)0x65, (byte)0x30, (byte)0x32, (byte)0x30, (byte)0x10, (byte)0x06, (byte)0x07, (byte)0x2a, (byte)0x86, (byte)0x48, (byte)0xce, (byte)0x3d, (byte)0x02, (byte)0x01, (byte)0x06, (byte)0x05, (byte)0x2b, (byte)0x81, (byte)0x04, (byte)0x00, (byte)0x06, (byte)0x03, (byte)0x1e, (byte)0x00, (byte)0x04, (byte)0x84, (byte)0x4d, (byte)0x9a, (byte)0x8f, (byte)0x58, (byte)0xee, (byte)0x5a, (byte)0x28, (byte)0x42, (byte)0x28, (byte)0x04, (byte)0xea, (byte)0x40, (byte)0x18, (byte)0x1a, (byte)0xd7, (byte)0x93, (byte)0x74, (byte)0xaf, (byte)0xf8, (byte)0xaf, (byte)0xa2, (byte)0xa6, (byte)0x8d, (byte)0x0f, (byte)0xc6, (byte)0xa9, (byte)0x2d, (byte)0x30, (byte)0x0a, (byte)0x06, (byte)0x08, (byte)0x2a, (byte)0x86, (byte)0x48, (byte)0xce, (byte)0x3d, (byte)0x04, (byte)0x03, (byte)0x02, (byte)0x03, (byte)0x23, (byte)0x00, (byte)0x30, (byte)0x20, (byte)0x02, (byte)0x0e, (byte)0x33, (byte)0x55, (byte)0xd2, (byte)0x8c, (byte)0x45, (byte)0x68, (byte)0xbf, (byte)0xd6, (byte)0x9d, (byte)0xf0, (byte)0xf7, (byte)0x2e, (byte)0x35, (byte)0x13, (byte)0x02, (byte)0x0e, (byte)0x2f, (byte)0x6b, (byte)0xa5, (byte)0x5c, (byte)0x7f, (byte)0x94, (byte)0x7c, (byte)0x2c, (byte)0x8d, (byte)0x45, (byte)0x7a, (byte)0x18, (byte)0x36, (byte)0x8f};
	private static final byte[] ROOT_PRIVATE =
		new byte[]{(byte)0x30, (byte)0x3e, (byte)0x02, (byte)0x01, (byte)0x01, (byte)0x04, (byte)0x0e, (byte)0x24, (byte)0x44, (byte)0xac, (byte)0x5a, (byte)0xc2, (byte)0xa5, (byte)0xe1, (byte)0xad, (byte)0x2a, (byte)0x41, (byte)0x38, (byte)0xf9, (byte)0xa8, (byte)0xda, (byte)0xa0, (byte)0x07, (byte)0x06, (byte)0x05, (byte)0x2b, (byte)0x81, (byte)0x04, (byte)0x00, (byte)0x06, (byte)0xa1, (byte)0x20, (byte)0x03, (byte)0x1e, (byte)0x00, (byte)0x04, (byte)0x84, (byte)0x4d, (byte)0x9a, (byte)0x8f, (byte)0x58, (byte)0xee, (byte)0x5a, (byte)0x28, (byte)0x42, (byte)0x28, (byte)0x04, (byte)0xea, (byte)0x40, (byte)0x18, (byte)0x1a, (byte)0xd7, (byte)0x93, (byte)0x74, (byte)0xaf, (byte)0xf8, (byte)0xaf, (byte)0xa2, (byte)0xa6, (byte)0x8d, (byte)0x0f, (byte)0xc6, (byte)0xa9, (byte)0x2d};
	private static final byte[] CARD_INTERMEDIATE =
		new byte[]{(byte)0x30, (byte)0x82, (byte)0x01, (byte)0x88, (byte)0x30, (byte)0x82, (byte)0x01, (byte)0x52, (byte)0x02, (byte)0x01, (byte)0x01, (byte)0x30, (byte)0x0a, (byte)0x06, (byte)0x08, (byte)0x2a, (byte)0x86, (byte)0x48, (byte)0xce, (byte)0x3d, (byte)0x04, (byte)0x03, (byte)0x02, (byte)0x30, (byte)0x79, (byte)0x31, (byte)0x0b, (byte)0x30, (byte)0x09, (byte)0x06, (byte)0x03, (byte)0x55, (byte)0x04, (byte)0x06, (byte)0x13, (byte)0x02, (byte)0x4e, (byte)0x4c, (byte)0x31, (byte)0x16, (byte)0x30, (byte)0x14, (byte)0x06, (byte)0x03, (byte)0x55, (byte)0x04, (byte)0x08, (byte)0x0c, (byte)0x0d, (byte)0x4e, (byte)0x6f, (byte)0x6f, (byte)0x72, (byte)0x64, (byte)0x2d, (byte)0x42, (byte)0x72, (byte)0x61, (byte)0x62, (byte)0x61, (byte)0x6e, (byte)0x74, (byte)0x31, (byte)0x12, (byte)0x30, (byte)0x10, (byte)0x06, (byte)0x03, (byte)0x55, (byte)0x04, (byte)0x07, (byte)0x0c, (byte)0x09, (byte)0x45, (byte)0x69, (byte)0x6e, (byte)0x64, (byte)0x68, (byte)0x6f, (byte)0x76, (byte)0x65, (byte)0x6e, (byte)0x31, (byte)0x0d, (byte)0x30, (byte)0x0b, (byte)0x06, (byte)0x03, (byte)0x55, (byte)0x04, (byte)0x0a, (byte)0x0c, (byte)0x04, (byte)0x54, (byte)0x55, (byte)0x2f, (byte)0x65, (byte)0x31, (byte)0x0c, (byte)0x30, (byte)0x0a, (byte)0x06, (byte)0x03, (byte)0x55, (byte)0x04, (byte)0x0b, (byte)0x0c, (byte)0x03, (byte)0x49, (byte)0x53, (byte)0x54, (byte)0x31, (byte)0x21, (byte)0x30, (byte)0x1f, (byte)0x06, (byte)0x03, (byte)0x55, (byte)0x04, (byte)0x03, (byte)0x0c, (byte)0x18, (byte)0x54, (byte)0x65, (byte)0x61, (byte)0x6d, (byte)0x41, (byte)0x52, (byte)0x41, (byte)0x20, (byte)0x52, (byte)0x6f, (byte)0x6f, (byte)0x74, (byte)0x20, (byte)0x43, (byte)0x65, (byte)0x72, (byte)0x74, (byte)0x69, (byte)0x66, (byte)0x69, (byte)0x63, (byte)0x61, (byte)0x74, (byte)0x65, (byte)0x30, (byte)0x1e, (byte)0x17, (byte)0x0d, (byte)0x31, (byte)0x34, (byte)0x30, (byte)0x39, (byte)0x31, (byte)0x37, (byte)0x31, (byte)0x33, (byte)0x35, (byte)0x32, (byte)0x35, (byte)0x38, (byte)0x5a, (byte)0x17, (byte)0x0d, (byte)0x31, (byte)0x35, (byte)0x30, (byte)0x39, (byte)0x31, (byte)0x37, (byte)0x31, (byte)0x33, (byte)0x35, (byte)0x32, (byte)0x35, (byte)0x38, (byte)0x5a, (byte)0x30, (byte)0x72, (byte)0x31, (byte)0x0b, (byte)0x30, (byte)0x09, (byte)0x06, (byte)0x03, (byte)0x55, (byte)0x04, (byte)0x06, (byte)0x13, (byte)0x02, (byte)0x4e, (byte)0x4c, (byte)0x31, (byte)0x16, (byte)0x30, (byte)0x14, (byte)0x06, (byte)0x03, (byte)0x55, (byte)0x04, (byte)0x08, (byte)0x0c, (byte)0x0d, (byte)0x4e, (byte)0x6f, (byte)0x6f, (byte)0x72, (byte)0x64, (byte)0x2d, (byte)0x42, (byte)0x72, (byte)0x61, (byte)0x62, (byte)0x61, (byte)0x6e, (byte)0x74, (byte)0x31, (byte)0x0d, (byte)0x30, (byte)0x0b, (byte)0x06, (byte)0x03, (byte)0x55, (byte)0x04, (byte)0x0a, (byte)0x0c, (byte)0x04, (byte)0x54, (byte)0x55, (byte)0x2f, (byte)0x65, (byte)0x31, (byte)0x0c, (byte)0x30, (byte)0x0a, (byte)0x06, (byte)0x03, (byte)0x55, (byte)0x04, (byte)0x0b, (byte)0x0c, (byte)0x03, (byte)0x49, (byte)0x53, (byte)0x54, (byte)0x31, (byte)0x2e, (byte)0x30, (byte)0x2c, (byte)0x06, (byte)0x03, (byte)0x55, (byte)0x04, (byte)0x03, (byte)0x0c, (byte)0x25, (byte)0x54, (byte)0x65, (byte)0x61, (byte)0x6d, (byte)0x41, (byte)0x52, (byte)0x41, (byte)0x20, (byte)0x43, (byte)0x61, (byte)0x72, (byte)0x64, (byte)0x20, (byte)0x49, (byte)0x6e, (byte)0x74, (byte)0x65, (byte)0x72, (byte)0x6d, (byte)0x65, (byte)0x64, (byte)0x69, (byte)0x61, (byte)0x74, (byte)0x65, (byte)0x20, (byte)0x43, (byte)0x65, (byte)0x72, (byte)0x74, (byte)0x69, (byte)0x66, (byte)0x69, (byte)0x63, (byte)0x61, (byte)0x74, (byte)0x65, (byte)0x30, (byte)0x32, (byte)0x30, (byte)0x10, (byte)0x06, (byte)0x07, (byte)0x2a, (byte)0x86, (byte)0x48, (byte)0xce, (byte)0x3d, (byte)0x02, (byte)0x01, (byte)0x06, (byte)0x05, (byte)0x2b, (byte)0x81, (byte)0x04, (byte)0x00, (byte)0x06, (byte)0x03, (byte)0x1e, (byte)0x00, (byte)0x04, (byte)0x6e, (byte)0xf2, (byte)0xa1, (byte)0x6c, (byte)0x34, (byte)0x16, (byte)0x3b, (byte)0xc0, (byte)0x60, (byte)0x3a, (byte)0x97, (byte)0xce, (byte)0xfa, (byte)0x48, (byte)0x38, (byte)0xba, (byte)0x28, (byte)0xfe, (byte)0x11, (byte)0x0b, (byte)0x41, (byte)0x30, (byte)0xf1, (byte)0x25, (byte)0x28, (byte)0x6f, (byte)0x2b, (byte)0x23, (byte)0x30, (byte)0x0a, (byte)0x06, (byte)0x08, (byte)0x2a, (byte)0x86, (byte)0x48, (byte)0xce, (byte)0x3d, (byte)0x04, (byte)0x03, (byte)0x02, (byte)0x03, (byte)0x24, (byte)0x00, (byte)0x30, (byte)0x21, (byte)0x02, (byte)0x0e, (byte)0x00, (byte)0x99, (byte)0x7a, (byte)0x87, (byte)0xf2, (byte)0xfd, (byte)0x49, (byte)0xca, (byte)0x70, (byte)0xea, (byte)0x79, (byte)0x0c, (byte)0x68, (byte)0xda, (byte)0x02, (byte)0x0f, (byte)0x00, (byte)0x81, (byte)0xa5, (byte)0xc4, (byte)0x53, (byte)0x1c, (byte)0x7c, (byte)0x0e, (byte)0x14, (byte)0x37, (byte)0x6b, (byte)0x4b, (byte)0xe7, (byte)0x53, (byte)0x39};


	public static void main(String[] args) {
		try {
			Security.addProvider(new BouncyCastleProvider());
        	CertificateFactory cf = CertificateFactory.getInstance("X.509", "BC");
        	KeyFactory kf = KeyFactory.getInstance("EC", "BC");
        	X509Certificate root_cert = (X509Certificate)cf.generateCertificate(new ByteInputStream(ROOT_CERT, ROOT_CERT.length));
    		X509Certificate card_intermediate = (X509Certificate)cf.generateCertificate(new ByteInputStream(CARD_INTERMEDIATE, CARD_INTERMEDIATE.length));
    		
    		BigInteger p = new BigInteger(1, new byte[]{});
    		BigInteger a = new BigInteger(1, new byte[]{});
    		BigInteger b = new BigInteger(1, new byte[]{});
    		EllipticCurve curveSpec112r1 = new EllipticCurve(new ECFieldFp(p), a, b);
    		ECPoint g = curveSpec112r1.
    		BigInteger n = new BigInteger(1, new byte[]{});
    		int h = 1;
    		
    		
    		ECParameterSpec spec = new ECParameterSpec(curveSpec112r1, g, n, h);
    		PrivateKey privk = kf.generatePrivate(new ECPrivateKeySpec(new BigInteger(ROOT_PRIVATE), ncspec));
        	card_intermediate.verify(root_cert.getPublicKey(), "BC");
			System.out.println("yes");
		} catch (Exception e) {
			System.out.println("fuck");
		}
	}

}
